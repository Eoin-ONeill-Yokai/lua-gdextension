#!/usr/bin/env python
import os;

Import("env")
Import("env_modules")

env_lua = env_modules.Clone()


# Generate sources
python_bin = os.getenv("PYTHON_BIN", "python")
env_lua.Command(
    [
        "../src/generated/global_enums.hpp",
        "../src/generated/utility_functions.hpp",
    ],
    [
        "../src/generate_code.py",
    ],
    action=python_bin + " $SOURCE",
)

# Lua defines
env_lua.Append(CPPDEFINES="MAKE_LIB")
if env_lua["platform"] == "windows":
    env_lua.Append(CPPDEFINES="LUA_USE_WINDOWS")
elif env_lua["platform"] == "macos":
    env_lua.Append(CPPDEFINES="LUA_USE_MACOSX")
elif env_lua["platform"] == "ios":
    env_lua.Append(CPPDEFINES="LUA_USE_IOS")
elif env_lua["platform"] == "linux":
    env_lua.Append(CPPDEFINES="LUA_USE_LINUX")
elif env_lua["platform"] == "android":
    env_lua.Append(CPPDEFINES="LUA_USE_ANDROID")
    if "32" in env_lua["arch"]:
        env_lua.Append(CPPDEFINES="LUA_USE_ANDROID_32")
else:
    env_lua.Append(CPPDEFINES="LUA_USE_POSIX")


env_lua.Append(CPPPATH="../lib/lua")

# Sol defines
env_lua.Append(CPPDEFINES=["SOL_EXCEPTIONS_SAFE_PROPAGATION", "SOL_NO_NIL=0"])
if env_lua["target"] == "template_debug":
    env_lua.Append(CPPDEFINES=["SOL_ALL_SAFETIES_ON", "SOL_PRINT_ERRORS"])

env_lua.Append(CPPPATH="../lib/sol2/include")

# Build lua as GDModule
source_directories = [".", "luaopen", "utils"]
sources = [
    Glob("../src/{}/*.cpp".format(directory))
    for directory in source_directories
]

# Godot source files
module_obj = []
env_lua.add_source_files(module_obj, sources)
env.modules_sources += module_obj

print("OK?")
